{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE TypeOperators #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Chord where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobufAST
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ( (.=), (.:) )
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Proto3.Wire.Decode as HsProtobuf
    ( Parser, RawField )
import qualified Control.Applicative as Hs
import Control.Applicative ( (<*>), (<|>), (<$>) )
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs ( Int16, Int32, Int64 )
import qualified Data.List.NonEmpty as Hs ( NonEmpty(..) )
import qualified Data.Map as Hs ( Map, mapKeysMonotonic )
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs ( fromString )
import qualified Data.Text.Lazy as Hs ( Text )
import qualified Data.Vector as Hs ( Vector )
import qualified Data.Word as Hs ( Word16, Word32, Word64 )
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Wrappers.Polymorphic as HsProtobuf
    ( Wrapped(..) )
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC
    hiding ( serverLoop )
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
    ( serverLoop )
data Chord request response
  = Chord {chordJoinV2 :: ((request 'HsGRPC.Normal Chord.JOIN Chord.JOINREQUESTED)
                           -> (Hs.IO (response 'HsGRPC.Normal Chord.JOINREQUESTED))),
           chordJoinOk :: ((request 'HsGRPC.Normal Chord.JOINOK Chord.JOINSUCCESSFUL)
                           -> (Hs.IO (response 'HsGRPC.Normal Chord.JOINSUCCESSFUL))),
           chordNewNode :: ((request 'HsGRPC.Normal Chord.NEWNODE Chord.NEWNODEOK)
                            -> (Hs.IO (response 'HsGRPC.Normal Chord.NEWNODEOK))),
           chordLeave :: ((request 'HsGRPC.Normal Chord.LEAVE Chord.LEAVEOK)
                          -> (Hs.IO (response 'HsGRPC.Normal Chord.LEAVEOK))),
           chordNodeGone :: ((request 'HsGRPC.Normal Chord.NODEGONE Chord.NODEGONEOK)
                             -> (Hs.IO (response 'HsGRPC.Normal Chord.NODEGONEOK))),
           chordStore :: ((request 'HsGRPC.Normal Chord.STORE Chord.STOREREQUESTED)
                          -> (Hs.IO (response 'HsGRPC.Normal Chord.STOREREQUESTED))),
           chordRetrieve :: ((request 'HsGRPC.Normal Chord.RETRIEVE Chord.RETRIEVERESPONSE)
                             -> (Hs.IO (response 'HsGRPC.Normal Chord.RETRIEVERESPONSE))),
           chordTransfer :: ((request 'HsGRPC.ClientStreaming Chord.TRANSFER Chord.TRANSFEROK)
                             -> (Hs.IO (response 'HsGRPC.ClientStreaming Chord.TRANSFEROK))),
           chordJoin :: ((request 'HsGRPC.Normal Chord.JOIN Chord.JOINOK)
                         -> (Hs.IO (response 'HsGRPC.Normal Chord.JOINOK))),
           chordRoute :: ((request 'HsGRPC.Normal Chord.ROUTE Chord.ROUTEOK)
                          -> (Hs.IO (response 'HsGRPC.Normal Chord.ROUTEOK)))}
  deriving (Hs.Generic)
chordServer ::
  (Chord HsGRPC.ServerRequest HsGRPC.ServerResponse)
  -> HsGRPC.ServiceOptions -> Hs.IO ()
chordServer
  Chord {chordJoinV2, chordJoinOk, chordNewNode, chordLeave,
         chordNodeGone, chordStore, chordRetrieve, chordTransfer, chordJoin,
         chordRoute}
  (ServiceOptions serverHost serverPort useCompression
                  userAgentPrefix userAgentSuffix initialMetadata sslConfig logger
                  serverMaxReceiveMessageLength serverMaxMetadataSize)
  = HsGRPC.serverLoop
      HsGRPC.defaultOptions
        {HsGRPC.optNormalHandlers = [HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/JoinV2")
                                       (HsGRPC.convertGeneratedServerHandler chordJoinV2),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/JoinOk")
                                       (HsGRPC.convertGeneratedServerHandler chordJoinOk),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/NewNode")
                                       (HsGRPC.convertGeneratedServerHandler chordNewNode),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/Leave")
                                       (HsGRPC.convertGeneratedServerHandler chordLeave),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/NodeGone")
                                       (HsGRPC.convertGeneratedServerHandler chordNodeGone),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/Store")
                                       (HsGRPC.convertGeneratedServerHandler chordStore),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/Retrieve")
                                       (HsGRPC.convertGeneratedServerHandler chordRetrieve),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/Join")
                                       (HsGRPC.convertGeneratedServerHandler chordJoin),
                                     HsGRPC.UnaryHandler
                                       (HsGRPC.MethodName "/chord.Chord/Route")
                                       (HsGRPC.convertGeneratedServerHandler chordRoute)],
         HsGRPC.optClientStreamHandlers = [HsGRPC.ClientStreamHandler
                                             (HsGRPC.MethodName "/chord.Chord/Transfer")
                                             (HsGRPC.convertGeneratedServerReaderHandler
                                                chordTransfer)],
         HsGRPC.optServerStreamHandlers = [],
         HsGRPC.optBiDiStreamHandlers = [], optServerHost = serverHost,
         optServerPort = serverPort, optUseCompression = useCompression,
         optUserAgentPrefix = userAgentPrefix,
         optUserAgentSuffix = userAgentSuffix,
         optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
         optLogger = logger,
         optMaxReceiveMessageLength = serverMaxReceiveMessageLength,
         optMaxMetadataSize = serverMaxMetadataSize}
chordClient ::
  HsGRPC.Client
  -> Hs.IO (Chord HsGRPC.ClientRequest HsGRPC.ClientResult)
chordClient client
  = Hs.pure Chord
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/JoinV2"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/JoinOk"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/NewNode"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/Leave"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/NodeGone"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/Store"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/Retrieve"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/Transfer"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/Join"))
      <*>
        (Hs.pure (HsGRPC.clientRequest client)
           <*>
             HsGRPC.clientRegisterMethod
               client (HsGRPC.MethodName "/chord.Chord/Route"))
data JOINREQUESTED
  = JOINREQUESTED {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData JOINREQUESTED)
instance (HsProtobuf.Named JOINREQUESTED) where
  nameOf _ = Hs.fromString "JOINREQUESTED"
instance (HsProtobuf.HasDefault JOINREQUESTED)
instance (HsProtobuf.Message JOINREQUESTED) where
  encodeMessage _ JOINREQUESTED {} = Hs.mempty
  decodeMessage _ = Hs.pure JOINREQUESTED
  dotProto _ = []
instance (HsJSONPB.ToJSONPB JOINREQUESTED) where
  toJSONPB JOINREQUESTED = HsJSONPB.object []
  toEncodingPB JOINREQUESTED = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB JOINREQUESTED) where
  parseJSONPB
    = HsJSONPB.withObject
        "JOINREQUESTED" (\ obj -> Hs.pure JOINREQUESTED)
instance (HsJSONPB.ToJSON JOINREQUESTED) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON JOINREQUESTED) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema JOINREQUESTED) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "JOINREQUESTED",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
data JOINSUCCESSFUL
  = JOINSUCCESSFUL {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData JOINSUCCESSFUL)
instance (HsProtobuf.Named JOINSUCCESSFUL) where
  nameOf _ = Hs.fromString "JOINSUCCESSFUL"
instance (HsProtobuf.HasDefault JOINSUCCESSFUL)
instance (HsProtobuf.Message JOINSUCCESSFUL) where
  encodeMessage _ JOINSUCCESSFUL {} = Hs.mempty
  decodeMessage _ = Hs.pure JOINSUCCESSFUL
  dotProto _ = []
instance (HsJSONPB.ToJSONPB JOINSUCCESSFUL) where
  toJSONPB JOINSUCCESSFUL = HsJSONPB.object []
  toEncodingPB JOINSUCCESSFUL = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB JOINSUCCESSFUL) where
  parseJSONPB
    = HsJSONPB.withObject
        "JOINSUCCESSFUL" (\ obj -> Hs.pure JOINSUCCESSFUL)
instance (HsJSONPB.ToJSON JOINSUCCESSFUL) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON JOINSUCCESSFUL) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema JOINSUCCESSFUL) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "JOINSUCCESSFUL",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
data JOIN
  = JOIN {joinJoinedId :: Hs.Word64,
          joinJoinedIp :: Hs.Text,
          joinJoinedPort :: Hs.Word32,
          joinJoinedIdTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData JOIN)
instance (HsProtobuf.Named JOIN) where
  nameOf _ = Hs.fromString "JOIN"
instance (HsProtobuf.HasDefault JOIN)
instance (HsProtobuf.Message JOIN) where
  encodeMessage
    _
    JOIN {joinJoinedId, joinJoinedIp, joinJoinedPort, joinJoinedIdTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 11)
                 ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64))
                    joinJoinedId))
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 12)
                 ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) joinJoinedIp)))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 13) joinJoinedPort))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2003) joinJoinedIdTest)
  decodeMessage _
    = Hs.pure JOIN
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 11)))
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 12)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 13)
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2003)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 11)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "joinedId") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 12)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "joinedIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 13)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "joinedPort") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2003)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "joinedIdTest") [] ""]
instance (HsJSONPB.ToJSONPB JOIN) where
  toJSONPB (JOIN f11 f12 f13 f2003)
    = HsJSONPB.object
        ["joinedId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f11),
         "joinedIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f12),
         "joinedPort" .= f13, "joinedIdTest" .= f2003]
  toEncodingPB (JOIN f11 f12 f13 f2003)
    = HsJSONPB.pairs
        ["joinedId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f11),
         "joinedIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f12),
         "joinedPort" .= f13, "joinedIdTest" .= f2003]
instance (HsJSONPB.FromJSONPB JOIN) where
  parseJSONPB
    = HsJSONPB.withObject
        "JOIN"
        (\ obj
           -> Hs.pure JOIN
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "joinedId"))
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "joinedIp"))
                <*> obj .: "joinedPort"
                <*> obj .: "joinedIdTest")
instance (HsJSONPB.ToJSON JOIN) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON JOIN) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema JOIN) where
  declareNamedSchema _
    = do let declare_joinedId = HsJSONPB.declareSchemaRef
         joinJoinedId <- declare_joinedId Proxy.Proxy
         let declare_joinedIp = HsJSONPB.declareSchemaRef
         joinJoinedIp <- declare_joinedIp Proxy.Proxy
         let declare_joinedPort = HsJSONPB.declareSchemaRef
         joinJoinedPort <- declare_joinedPort Proxy.Proxy
         let declare_joinedIdTest = HsJSONPB.declareSchemaRef
         joinJoinedIdTest <- declare_joinedIdTest Proxy.Proxy
         let _ = Hs.pure JOIN
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_joinedId))
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_joinedIp))
                   <*> HsJSONPB.asProxy declare_joinedPort
                   <*> HsJSONPB.asProxy declare_joinedIdTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "JOIN",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("joinedId", 
                                                                                joinJoinedId),
                                                                               ("joinedIp", 
                                                                                joinJoinedIp),
                                                                               ("joinedPort", 
                                                                                joinJoinedPort),
                                                                               ("joinedIdTest", 
                                                                                joinJoinedIdTest)]}}
data JOINOK
  = JOINOK {joinokJoinedId :: Hs.Word64,
            joinokPredIp :: Hs.Text,
            joinokPredPort :: Hs.Word32,
            joinokSuccIp :: Hs.Text,
            joinokSuccPort :: Hs.Word32,
            joinokJoinedIdTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData JOINOK)
instance (HsProtobuf.Named JOINOK) where
  nameOf _ = Hs.fromString "JOINOK"
instance (HsProtobuf.HasDefault JOINOK)
instance (HsProtobuf.Message JOINOK) where
  encodeMessage
    _
    JOINOK {joinokJoinedId, joinokPredIp, joinokPredPort, joinokSuccIp,
            joinokSuccPort, joinokJoinedIdTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (Hs.mappend
                 (Hs.mappend
                    (HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 17)
                       ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64))
                          joinokJoinedId))
                    (HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 18)
                       ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) joinokPredIp)))
                 (HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 19) joinokPredPort))
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 20)
                 ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) joinokSuccIp)))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 21) joinokSuccPort))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2004) joinokJoinedIdTest)
  decodeMessage _
    = Hs.pure JOINOK
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 17)))
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 18)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 19)
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 20)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 21)
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2004)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 17)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "joinedId") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 18)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "predIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 19)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "predPort") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 20)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "succIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 21)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "succPort") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2004)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "joinedIdTest") [] ""]
instance (HsJSONPB.ToJSONPB JOINOK) where
  toJSONPB (JOINOK f17 f18 f19 f20 f21 f2004)
    = HsJSONPB.object
        ["joinedId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f17),
         "predIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f18),
         "predPort" .= f19,
         "succIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f20),
         "succPort" .= f21, "joinedIdTest" .= f2004]
  toEncodingPB (JOINOK f17 f18 f19 f20 f21 f2004)
    = HsJSONPB.pairs
        ["joinedId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f17),
         "predIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f18),
         "predPort" .= f19,
         "succIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f20),
         "succPort" .= f21, "joinedIdTest" .= f2004]
instance (HsJSONPB.FromJSONPB JOINOK) where
  parseJSONPB
    = HsJSONPB.withObject
        "JOINOK"
        (\ obj
           -> Hs.pure JOINOK
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "joinedId"))
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "predIp"))
                <*> obj .: "predPort"
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "succIp"))
                <*> obj .: "succPort"
                <*> obj .: "joinedIdTest")
instance (HsJSONPB.ToJSON JOINOK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON JOINOK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema JOINOK) where
  declareNamedSchema _
    = do let declare_joinedId = HsJSONPB.declareSchemaRef
         joinokJoinedId <- declare_joinedId Proxy.Proxy
         let declare_predIp = HsJSONPB.declareSchemaRef
         joinokPredIp <- declare_predIp Proxy.Proxy
         let declare_predPort = HsJSONPB.declareSchemaRef
         joinokPredPort <- declare_predPort Proxy.Proxy
         let declare_succIp = HsJSONPB.declareSchemaRef
         joinokSuccIp <- declare_succIp Proxy.Proxy
         let declare_succPort = HsJSONPB.declareSchemaRef
         joinokSuccPort <- declare_succPort Proxy.Proxy
         let declare_joinedIdTest = HsJSONPB.declareSchemaRef
         joinokJoinedIdTest <- declare_joinedIdTest Proxy.Proxy
         let _ = Hs.pure JOINOK
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_joinedId))
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_predIp))
                   <*> HsJSONPB.asProxy declare_predPort
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_succIp))
                   <*> HsJSONPB.asProxy declare_succPort
                   <*> HsJSONPB.asProxy declare_joinedIdTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "JOINOK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("joinedId", 
                                                                                joinokJoinedId),
                                                                               ("predIp", 
                                                                                joinokPredIp),
                                                                               ("predPort", 
                                                                                joinokPredPort),
                                                                               ("succIp", 
                                                                                joinokSuccIp),
                                                                               ("succPort", 
                                                                                joinokSuccPort),
                                                                               ("joinedIdTest", 
                                                                                joinokJoinedIdTest)]}}
data NEWNODE
  = NEWNODE {newnodeSuccIp :: Hs.Text, newnodeSuccPort :: Hs.Word32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData NEWNODE)
instance (HsProtobuf.Named NEWNODE) where
  nameOf _ = Hs.fromString "NEWNODE"
instance (HsProtobuf.HasDefault NEWNODE)
instance (HsProtobuf.Message NEWNODE) where
  encodeMessage _ NEWNODE {newnodeSuccIp, newnodeSuccPort}
    = Hs.mappend
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 22)
           ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) newnodeSuccIp))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 23) newnodeSuccPort)
  decodeMessage _
    = Hs.pure NEWNODE
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 22)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 23)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 22)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "succIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 23)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "succPort") [] ""]
instance (HsJSONPB.ToJSONPB NEWNODE) where
  toJSONPB (NEWNODE f22 f23)
    = HsJSONPB.object
        ["succIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f22),
         "succPort" .= f23]
  toEncodingPB (NEWNODE f22 f23)
    = HsJSONPB.pairs
        ["succIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f22),
         "succPort" .= f23]
instance (HsJSONPB.FromJSONPB NEWNODE) where
  parseJSONPB
    = HsJSONPB.withObject
        "NEWNODE"
        (\ obj
           -> Hs.pure NEWNODE
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "succIp"))
                <*> obj .: "succPort")
instance (HsJSONPB.ToJSON NEWNODE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NEWNODE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NEWNODE) where
  declareNamedSchema _
    = do let declare_succIp = HsJSONPB.declareSchemaRef
         newnodeSuccIp <- declare_succIp Proxy.Proxy
         let declare_succPort = HsJSONPB.declareSchemaRef
         newnodeSuccPort <- declare_succPort Proxy.Proxy
         let _ = Hs.pure NEWNODE
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_succIp))
                   <*> HsJSONPB.asProxy declare_succPort
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "NEWNODE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("succIp", 
                                                                                newnodeSuccIp),
                                                                               ("succPort", 
                                                                                newnodeSuccPort)]}}
data NEWNODEOK
  = NEWNODEOK {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData NEWNODEOK)
instance (HsProtobuf.Named NEWNODEOK) where
  nameOf _ = Hs.fromString "NEWNODEOK"
instance (HsProtobuf.HasDefault NEWNODEOK)
instance (HsProtobuf.Message NEWNODEOK) where
  encodeMessage _ NEWNODEOK {} = Hs.mempty
  decodeMessage _ = Hs.pure NEWNODEOK
  dotProto _ = []
instance (HsJSONPB.ToJSONPB NEWNODEOK) where
  toJSONPB NEWNODEOK = HsJSONPB.object []
  toEncodingPB NEWNODEOK = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB NEWNODEOK) where
  parseJSONPB
    = HsJSONPB.withObject "NEWNODEOK" (\ obj -> Hs.pure NEWNODEOK)
instance (HsJSONPB.ToJSON NEWNODEOK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NEWNODEOK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NEWNODEOK) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "NEWNODEOK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
data LEAVE
  = LEAVE {leavePredId :: Hs.Word64,
           leavePredIp :: Hs.Text,
           leavePredPort :: Hs.Word32,
           leavePredIdTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData LEAVE)
instance (HsProtobuf.Named LEAVE) where
  nameOf _ = Hs.fromString "LEAVE"
instance (HsProtobuf.HasDefault LEAVE)
instance (HsProtobuf.Message LEAVE) where
  encodeMessage
    _
    LEAVE {leavePredId, leavePredIp, leavePredPort, leavePredIdTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 14)
                 ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) leavePredId))
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 15)
                 ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) leavePredIp)))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 16) leavePredPort))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2005) leavePredIdTest)
  decodeMessage _
    = Hs.pure LEAVE
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 14)))
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 15)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 16)
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2005)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 14)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "predId") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 15)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "predIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 16)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "predPort") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2005)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "predIdTest") [] ""]
instance (HsJSONPB.ToJSONPB LEAVE) where
  toJSONPB (LEAVE f14 f15 f16 f2005)
    = HsJSONPB.object
        ["predId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f14),
         "predIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f15),
         "predPort" .= f16, "predIdTest" .= f2005]
  toEncodingPB (LEAVE f14 f15 f16 f2005)
    = HsJSONPB.pairs
        ["predId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f14),
         "predIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f15),
         "predPort" .= f16, "predIdTest" .= f2005]
instance (HsJSONPB.FromJSONPB LEAVE) where
  parseJSONPB
    = HsJSONPB.withObject
        "LEAVE"
        (\ obj
           -> Hs.pure LEAVE
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "predId"))
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "predIp"))
                <*> obj .: "predPort"
                <*> obj .: "predIdTest")
instance (HsJSONPB.ToJSON LEAVE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON LEAVE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema LEAVE) where
  declareNamedSchema _
    = do let declare_predId = HsJSONPB.declareSchemaRef
         leavePredId <- declare_predId Proxy.Proxy
         let declare_predIp = HsJSONPB.declareSchemaRef
         leavePredIp <- declare_predIp Proxy.Proxy
         let declare_predPort = HsJSONPB.declareSchemaRef
         leavePredPort <- declare_predPort Proxy.Proxy
         let declare_predIdTest = HsJSONPB.declareSchemaRef
         leavePredIdTest <- declare_predIdTest Proxy.Proxy
         let _ = Hs.pure LEAVE
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_predId))
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_predIp))
                   <*> HsJSONPB.asProxy declare_predPort
                   <*> HsJSONPB.asProxy declare_predIdTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "LEAVE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("predId", 
                                                                                leavePredId),
                                                                               ("predIp", 
                                                                                leavePredIp),
                                                                               ("predPort", 
                                                                                leavePredPort),
                                                                               ("predIdTest", 
                                                                                leavePredIdTest)]}}
data LEAVEOK
  = LEAVEOK {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData LEAVEOK)
instance (HsProtobuf.Named LEAVEOK) where
  nameOf _ = Hs.fromString "LEAVEOK"
instance (HsProtobuf.HasDefault LEAVEOK)
instance (HsProtobuf.Message LEAVEOK) where
  encodeMessage _ LEAVEOK {} = Hs.mempty
  decodeMessage _ = Hs.pure LEAVEOK
  dotProto _ = []
instance (HsJSONPB.ToJSONPB LEAVEOK) where
  toJSONPB LEAVEOK = HsJSONPB.object []
  toEncodingPB LEAVEOK = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB LEAVEOK) where
  parseJSONPB
    = HsJSONPB.withObject "LEAVEOK" (\ obj -> Hs.pure LEAVEOK)
instance (HsJSONPB.ToJSON LEAVEOK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON LEAVEOK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema LEAVEOK) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "LEAVEOK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
data NODEGONE
  = NODEGONE {nodegoneSuccId :: Hs.Word64,
              nodegoneSuccIp :: Hs.Text,
              nodegoneSuccPort :: Hs.Word32,
              nodegoneSuccIdTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData NODEGONE)
instance (HsProtobuf.Named NODEGONE) where
  nameOf _ = Hs.fromString "NODEGONE"
instance (HsProtobuf.HasDefault NODEGONE)
instance (HsProtobuf.Message NODEGONE) where
  encodeMessage
    _
    NODEGONE {nodegoneSuccId, nodegoneSuccIp, nodegoneSuccPort,
              nodegoneSuccIdTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 24)
                 ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64))
                    nodegoneSuccId))
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 25)
                 ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                    nodegoneSuccIp)))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 26) nodegoneSuccPort))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2006) nodegoneSuccIdTest)
  decodeMessage _
    = Hs.pure NODEGONE
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 24)))
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 25)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 26)
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2006)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 24)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "succId") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 25)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "succIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 26)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "succPort") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2006)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "succIdTest") [] ""]
instance (HsJSONPB.ToJSONPB NODEGONE) where
  toJSONPB (NODEGONE f24 f25 f26 f2006)
    = HsJSONPB.object
        ["succId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f24),
         "succIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f25),
         "succPort" .= f26, "succIdTest" .= f2006]
  toEncodingPB (NODEGONE f24 f25 f26 f2006)
    = HsJSONPB.pairs
        ["succId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f24),
         "succIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f25),
         "succPort" .= f26, "succIdTest" .= f2006]
instance (HsJSONPB.FromJSONPB NODEGONE) where
  parseJSONPB
    = HsJSONPB.withObject
        "NODEGONE"
        (\ obj
           -> Hs.pure NODEGONE
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "succId"))
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "succIp"))
                <*> obj .: "succPort"
                <*> obj .: "succIdTest")
instance (HsJSONPB.ToJSON NODEGONE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NODEGONE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NODEGONE) where
  declareNamedSchema _
    = do let declare_succId = HsJSONPB.declareSchemaRef
         nodegoneSuccId <- declare_succId Proxy.Proxy
         let declare_succIp = HsJSONPB.declareSchemaRef
         nodegoneSuccIp <- declare_succIp Proxy.Proxy
         let declare_succPort = HsJSONPB.declareSchemaRef
         nodegoneSuccPort <- declare_succPort Proxy.Proxy
         let declare_succIdTest = HsJSONPB.declareSchemaRef
         nodegoneSuccIdTest <- declare_succIdTest Proxy.Proxy
         let _ = Hs.pure NODEGONE
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_succId))
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_succIp))
                   <*> HsJSONPB.asProxy declare_succPort
                   <*> HsJSONPB.asProxy declare_succIdTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "NODEGONE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("succId", 
                                                                                nodegoneSuccId),
                                                                               ("succIp", 
                                                                                nodegoneSuccIp),
                                                                               ("succPort", 
                                                                                nodegoneSuccPort),
                                                                               ("succIdTest", 
                                                                                nodegoneSuccIdTest)]}}
data NODEGONEOK
  = NODEGONEOK {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData NODEGONEOK)
instance (HsProtobuf.Named NODEGONEOK) where
  nameOf _ = Hs.fromString "NODEGONEOK"
instance (HsProtobuf.HasDefault NODEGONEOK)
instance (HsProtobuf.Message NODEGONEOK) where
  encodeMessage _ NODEGONEOK {} = Hs.mempty
  decodeMessage _ = Hs.pure NODEGONEOK
  dotProto _ = []
instance (HsJSONPB.ToJSONPB NODEGONEOK) where
  toJSONPB NODEGONEOK = HsJSONPB.object []
  toEncodingPB NODEGONEOK = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB NODEGONEOK) where
  parseJSONPB
    = HsJSONPB.withObject "NODEGONEOK" (\ obj -> Hs.pure NODEGONEOK)
instance (HsJSONPB.ToJSON NODEGONEOK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NODEGONEOK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NODEGONEOK) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "NODEGONEOK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
data STORE
  = STORE {storeKey :: Hs.Word64,
           storeSize :: Hs.Int32,
           storeValue :: Hs.ByteString,
           storeKeyTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData STORE)
instance (HsProtobuf.Named STORE) where
  nameOf _ = Hs.fromString "STORE"
instance (HsProtobuf.HasDefault STORE)
instance (HsProtobuf.Message STORE) where
  encodeMessage
    _
    STORE {storeKey, storeSize, storeValue, storeKeyTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 3)
                 ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) storeKey))
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 4) storeSize))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 5)
              ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                 storeValue)))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2000) storeKeyTest)
  decodeMessage _
    = Hs.pure STORE
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 3)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 4)
        <*>
          ((HsProtobuf.coerceOver
              @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 5)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2000)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 3)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "key") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 4) (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "size") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 5) (HsProtobufAST.Prim HsProtobufAST.Bytes)
         (HsProtobufAST.Single "value") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2000)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "keyTest") [] ""]
instance (HsJSONPB.ToJSONPB STORE) where
  toJSONPB (STORE f3 f4 f5 f2000)
    = HsJSONPB.object
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f3),
         "size" .= f4,
         "value"
           .=
             ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f5),
         "keyTest" .= f2000]
  toEncodingPB (STORE f3 f4 f5 f2000)
    = HsJSONPB.pairs
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f3),
         "size" .= f4,
         "value"
           .=
             ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f5),
         "keyTest" .= f2000]
instance (HsJSONPB.FromJSONPB STORE) where
  parseJSONPB
    = HsJSONPB.withObject
        "STORE"
        (\ obj
           -> Hs.pure STORE
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "key"))
                <*> obj .: "size"
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                     (obj .: "value"))
                <*> obj .: "keyTest")
instance (HsJSONPB.ToJSON STORE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON STORE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema STORE) where
  declareNamedSchema _
    = do let declare_key = HsJSONPB.declareSchemaRef
         storeKey <- declare_key Proxy.Proxy
         let declare_size = HsJSONPB.declareSchemaRef
         storeSize <- declare_size Proxy.Proxy
         let declare_value = HsJSONPB.declareSchemaRef
         storeValue <- declare_value Proxy.Proxy
         let declare_keyTest = HsJSONPB.declareSchemaRef
         storeKeyTest <- declare_keyTest Proxy.Proxy
         let _ = Hs.pure STORE
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_key))
                   <*> HsJSONPB.asProxy declare_size
                   <*>
                     ((HsProtobuf.coerceOver
                         @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                        (HsJSONPB.asProxy declare_value))
                   <*> HsJSONPB.asProxy declare_keyTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "STORE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("key", storeKey),
                                                                               ("size", storeSize),
                                                                               ("value", 
                                                                                storeValue),
                                                                               ("keyTest", 
                                                                                storeKeyTest)]}}
data STOREREQUESTED
  = STOREREQUESTED {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData STOREREQUESTED)
instance (HsProtobuf.Named STOREREQUESTED) where
  nameOf _ = Hs.fromString "STOREREQUESTED"
instance (HsProtobuf.HasDefault STOREREQUESTED)
instance (HsProtobuf.Message STOREREQUESTED) where
  encodeMessage _ STOREREQUESTED {} = Hs.mempty
  decodeMessage _ = Hs.pure STOREREQUESTED
  dotProto _ = []
instance (HsJSONPB.ToJSONPB STOREREQUESTED) where
  toJSONPB STOREREQUESTED = HsJSONPB.object []
  toEncodingPB STOREREQUESTED = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB STOREREQUESTED) where
  parseJSONPB
    = HsJSONPB.withObject
        "STOREREQUESTED" (\ obj -> Hs.pure STOREREQUESTED)
instance (HsJSONPB.ToJSON STOREREQUESTED) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON STOREREQUESTED) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema STOREREQUESTED) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "STOREREQUESTED",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
data RETRIEVE
  = RETRIEVE {retrieveKey :: Hs.Word64,
              retrieveRequirerId :: Hs.Word64,
              retrieveRequirerIdTes :: Hs.Int32,
              retrieveRequirerIp :: Hs.Text,
              retrieveRequirerPort :: Hs.Word32,
              retrieveKeyTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData RETRIEVE)
instance (HsProtobuf.Named RETRIEVE) where
  nameOf _ = Hs.fromString "RETRIEVE"
instance (HsProtobuf.HasDefault RETRIEVE)
instance (HsProtobuf.Message RETRIEVE) where
  encodeMessage
    _
    RETRIEVE {retrieveKey, retrieveRequirerId, retrieveRequirerIdTes,
              retrieveRequirerIp, retrieveRequirerPort, retrieveKeyTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (Hs.mappend
                 (Hs.mappend
                    (HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 6)
                       ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) retrieveKey))
                    (HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 7)
                       ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64))
                          retrieveRequirerId)))
                 (HsProtobuf.encodeMessageField
                    (HsProtobuf.FieldNumber 8) retrieveRequirerIdTes))
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 9)
                 ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text))
                    retrieveRequirerIp)))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 10) retrieveRequirerPort))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2001) retrieveKeyTest)
  decodeMessage _
    = Hs.pure RETRIEVE
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 6)))
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 7)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 8)
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 9)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 10)
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2001)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 6)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "key") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 7)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "requirerId") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 8) (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "requirerIdTes") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 9)
         (HsProtobufAST.Prim HsProtobufAST.String)
         (HsProtobufAST.Single "requirerIp") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 10)
         (HsProtobufAST.Prim HsProtobufAST.UInt32)
         (HsProtobufAST.Single "requirerPort") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2001)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "keyTest") [] ""]
instance (HsJSONPB.ToJSONPB RETRIEVE) where
  toJSONPB (RETRIEVE f6 f7 f8 f9 f10 f2001)
    = HsJSONPB.object
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f6),
         "requirerId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f7),
         "requirerIdTes" .= f8,
         "requirerIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f9),
         "requirerPort" .= f10, "keyTest" .= f2001]
  toEncodingPB (RETRIEVE f6 f7 f8 f9 f10 f2001)
    = HsJSONPB.pairs
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f6),
         "requirerId"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f7),
         "requirerIdTes" .= f8,
         "requirerIp"
           .= ((Hs.coerce @Hs.Text @(HsProtobuf.String Hs.Text)) f9),
         "requirerPort" .= f10, "keyTest" .= f2001]
instance (HsJSONPB.FromJSONPB RETRIEVE) where
  parseJSONPB
    = HsJSONPB.withObject
        "RETRIEVE"
        (\ obj
           -> Hs.pure RETRIEVE
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "key"))
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "requirerId"))
                <*> obj .: "requirerIdTes"
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                     (obj .: "requirerIp"))
                <*> obj .: "requirerPort"
                <*> obj .: "keyTest")
instance (HsJSONPB.ToJSON RETRIEVE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON RETRIEVE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema RETRIEVE) where
  declareNamedSchema _
    = do let declare_key = HsJSONPB.declareSchemaRef
         retrieveKey <- declare_key Proxy.Proxy
         let declare_requirerId = HsJSONPB.declareSchemaRef
         retrieveRequirerId <- declare_requirerId Proxy.Proxy
         let declare_requirerIdTes = HsJSONPB.declareSchemaRef
         retrieveRequirerIdTes <- declare_requirerIdTes Proxy.Proxy
         let declare_requirerIp = HsJSONPB.declareSchemaRef
         retrieveRequirerIp <- declare_requirerIp Proxy.Proxy
         let declare_requirerPort = HsJSONPB.declareSchemaRef
         retrieveRequirerPort <- declare_requirerPort Proxy.Proxy
         let declare_keyTest = HsJSONPB.declareSchemaRef
         retrieveKeyTest <- declare_keyTest Proxy.Proxy
         let _ = Hs.pure RETRIEVE
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_key))
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_requirerId))
                   <*> HsJSONPB.asProxy declare_requirerIdTes
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.String Hs.Text) @Hs.Text)
                        (HsJSONPB.asProxy declare_requirerIp))
                   <*> HsJSONPB.asProxy declare_requirerPort
                   <*> HsJSONPB.asProxy declare_keyTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "RETRIEVE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("key", retrieveKey),
                                                                               ("requirerId", 
                                                                                retrieveRequirerId),
                                                                               ("requirerIdTes", 
                                                                                retrieveRequirerIdTes),
                                                                               ("requirerIp", 
                                                                                retrieveRequirerIp),
                                                                               ("requirerPort", 
                                                                                retrieveRequirerPort),
                                                                               ("keyTest", 
                                                                                retrieveKeyTest)]}}
data OK
  = OK {okKey :: Hs.Word64,
        okSize :: Hs.Int32,
        okValue :: Hs.ByteString,
        okKeyTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData OK)
instance (HsProtobuf.Named OK) where
  nameOf _ = Hs.fromString "OK"
instance (HsProtobuf.HasDefault OK)
instance (HsProtobuf.Message OK) where
  encodeMessage _ OK {okKey, okSize, okValue, okKeyTest}
    = Hs.mappend
        (Hs.mappend
           (Hs.mappend
              (HsProtobuf.encodeMessageField
                 (HsProtobuf.FieldNumber 27)
                 ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) okKey))
              (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 28) okSize))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 29)
              ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                 okValue)))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2007) okKeyTest)
  decodeMessage _
    = Hs.pure OK
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 27)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 28)
        <*>
          ((HsProtobuf.coerceOver
              @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 29)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2007)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 27)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "key") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 28)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "size") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 29)
         (HsProtobufAST.Prim HsProtobufAST.Bytes)
         (HsProtobufAST.Single "value") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2007)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "keyTest") [] ""]
instance (HsJSONPB.ToJSONPB OK) where
  toJSONPB (OK f27 f28 f29 f2007)
    = HsJSONPB.object
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f27),
         "size" .= f28,
         "value"
           .=
             ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f29),
         "keyTest" .= f2007]
  toEncodingPB (OK f27 f28 f29 f2007)
    = HsJSONPB.pairs
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f27),
         "size" .= f28,
         "value"
           .=
             ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f29),
         "keyTest" .= f2007]
instance (HsJSONPB.FromJSONPB OK) where
  parseJSONPB
    = HsJSONPB.withObject
        "OK"
        (\ obj
           -> Hs.pure OK
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "key"))
                <*> obj .: "size"
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                     (obj .: "value"))
                <*> obj .: "keyTest")
instance (HsJSONPB.ToJSON OK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON OK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema OK) where
  declareNamedSchema _
    = do let declare_key = HsJSONPB.declareSchemaRef
         okKey <- declare_key Proxy.Proxy
         let declare_size = HsJSONPB.declareSchemaRef
         okSize <- declare_size Proxy.Proxy
         let declare_value = HsJSONPB.declareSchemaRef
         okValue <- declare_value Proxy.Proxy
         let declare_keyTest = HsJSONPB.declareSchemaRef
         okKeyTest <- declare_keyTest Proxy.Proxy
         let _ = Hs.pure OK
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_key))
                   <*> HsJSONPB.asProxy declare_size
                   <*>
                     ((HsProtobuf.coerceOver
                         @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                        (HsJSONPB.asProxy declare_value))
                   <*> HsJSONPB.asProxy declare_keyTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "OK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("key", okKey),
                                                                               ("size", okSize),
                                                                               ("value", okValue),
                                                                               ("keyTest", 
                                                                                okKeyTest)]}}
data NOTFOUND
  = NOTFOUND {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData NOTFOUND)
instance (HsProtobuf.Named NOTFOUND) where
  nameOf _ = Hs.fromString "NOTFOUND"
instance (HsProtobuf.HasDefault NOTFOUND)
instance (HsProtobuf.Message NOTFOUND) where
  encodeMessage _ NOTFOUND {} = Hs.mempty
  decodeMessage _ = Hs.pure NOTFOUND
  dotProto _ = []
instance (HsJSONPB.ToJSONPB NOTFOUND) where
  toJSONPB NOTFOUND = HsJSONPB.object []
  toEncodingPB NOTFOUND = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB NOTFOUND) where
  parseJSONPB
    = HsJSONPB.withObject "NOTFOUND" (\ obj -> Hs.pure NOTFOUND)
instance (HsJSONPB.ToJSON NOTFOUND) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON NOTFOUND) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema NOTFOUND) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "NOTFOUND",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
newtype RETRIEVERESPONSE
  = RETRIEVERESPONSE {retrieveresponseResponse :: (Hs.Maybe RETRIEVERESPONSEResponse)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData RETRIEVERESPONSE)
instance (HsProtobuf.Named RETRIEVERESPONSE) where
  nameOf _ = Hs.fromString "RETRIEVERESPONSE"
instance (HsProtobuf.HasDefault RETRIEVERESPONSE)
instance (HsProtobuf.Message RETRIEVERESPONSE) where
  encodeMessage _ RETRIEVERESPONSE {retrieveresponseResponse}
    = (case retrieveresponseResponse of
         Hs.Nothing -> Hs.mempty
         Hs.Just x
           -> case x of
                RETRIEVERESPONSEResponseOk y
                  -> HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 33)
                       ((Hs.coerce @(Hs.Maybe Chord.OK) @(HsProtobuf.Nested Chord.OK))
                          (Hs.Just y))
                RETRIEVERESPONSEResponseNotFound y
                  -> HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 34)
                       ((Hs.coerce
                           @(Hs.Maybe Chord.NOTFOUND) @(HsProtobuf.Nested Chord.NOTFOUND))
                          (Hs.Just y)))
  decodeMessage _
    = Hs.pure RETRIEVERESPONSE
        <*>
          HsProtobuf.oneof
            Hs.Nothing
            [((HsProtobuf.FieldNumber 33), 
              Hs.pure (Hs.fmap RETRIEVERESPONSEResponseOk)
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Chord.OK) @(Hs.Maybe Chord.OK))
                     HsProtobuf.decodeMessageField)),
             ((HsProtobuf.FieldNumber 34), 
              Hs.pure (Hs.fmap RETRIEVERESPONSEResponseNotFound)
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Chord.NOTFOUND) @(Hs.Maybe Chord.NOTFOUND))
                     HsProtobuf.decodeMessageField))]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB RETRIEVERESPONSE) where
  toJSONPB (RETRIEVERESPONSE f33_or_f34)
    = HsJSONPB.object
        [(let
            encodeResponse
              = (case f33_or_f34 of
                   Hs.Just (RETRIEVERESPONSEResponseOk f33) -> HsJSONPB.pair "ok" f33
                   Hs.Just (RETRIEVERESPONSEResponseNotFound f34)
                     -> HsJSONPB.pair "notFound" f34
                   Hs.Nothing -> Hs.mempty)
          in
            (\ options
               -> if HsJSONPB.optEmitNamedOneof options then
                      ("response" .= HsJSONPB.objectOrNull [encodeResponse] options)
                        options
                  else
                      encodeResponse options))]
  toEncodingPB (RETRIEVERESPONSE f33_or_f34)
    = HsJSONPB.pairs
        [(let
            encodeResponse
              = (case f33_or_f34 of
                   Hs.Just (RETRIEVERESPONSEResponseOk f33) -> HsJSONPB.pair "ok" f33
                   Hs.Just (RETRIEVERESPONSEResponseNotFound f34)
                     -> HsJSONPB.pair "notFound" f34
                   Hs.Nothing -> Hs.mempty)
          in
            (\ options
               -> if HsJSONPB.optEmitNamedOneof options then
                      ("response" .= HsJSONPB.pairsOrNull [encodeResponse] options)
                        options
                  else
                      encodeResponse options))]
instance (HsJSONPB.FromJSONPB RETRIEVERESPONSE) where
  parseJSONPB
    = HsJSONPB.withObject
        "RETRIEVERESPONSE"
        (\ obj
           -> Hs.pure RETRIEVERESPONSE
                <*>
                  (let
                     parseResponse parseObj
                       = Hs.msum
                           [Hs.Just Hs.. RETRIEVERESPONSEResponseOk
                              <$> HsJSONPB.parseField parseObj "ok",
                            Hs.Just Hs.. RETRIEVERESPONSEResponseNotFound
                              <$> HsJSONPB.parseField parseObj "notFound",
                            Hs.pure Hs.Nothing]
                   in
                     (obj .: "response"
                        Hs.>>= HsJSONPB.withObject "response" parseResponse)
                       <|> (parseResponse obj)))
instance (HsJSONPB.ToJSON RETRIEVERESPONSE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON RETRIEVERESPONSE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema RETRIEVERESPONSE) where
  declareNamedSchema _
    = do let declare_response = HsJSONPB.declareSchemaRef
         retrieveresponseResponse <- declare_response Proxy.Proxy
         let _ = Hs.pure RETRIEVERESPONSE
                   <*> HsJSONPB.asProxy declare_response
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "RETRIEVERESPONSE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("response", 
                                                                                retrieveresponseResponse)]}}
data RETRIEVERESPONSEResponse
  = RETRIEVERESPONSEResponseOk Chord.OK |
    RETRIEVERESPONSEResponseNotFound Chord.NOTFOUND
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData RETRIEVERESPONSEResponse)
instance (HsProtobuf.Named RETRIEVERESPONSEResponse) where
  nameOf _ = Hs.fromString "RETRIEVERESPONSEResponse"
instance (HsJSONPB.ToSchema RETRIEVERESPONSEResponse) where
  declareNamedSchema _
    = do let declare_ok = HsJSONPB.declareSchemaRef
         retrieveresponseresponseOk <- declare_ok Proxy.Proxy
         let _ = Hs.pure RETRIEVERESPONSEResponseOk
                   <*> HsJSONPB.asProxy declare_ok
         let declare_notFound = HsJSONPB.declareSchemaRef
         retrieveresponseresponseNotFound <- declare_notFound Proxy.Proxy
         let _ = Hs.pure RETRIEVERESPONSEResponseNotFound
                   <*> HsJSONPB.asProxy declare_notFound
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "RETRIEVERESPONSEResponse",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("ok", 
                                                                                retrieveresponseresponseOk),
                                                                               ("notFound", 
                                                                                retrieveresponseresponseNotFound)],
                                               HsJSONPB._schemaMinProperties = Hs.Just 1,
                                               HsJSONPB._schemaMaxProperties = Hs.Just 1}}
data TRANSFER
  = TRANSFER {transferKey :: Hs.Word64,
              transferValue :: Hs.ByteString,
              transferKeyTest :: Hs.Int32}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData TRANSFER)
instance (HsProtobuf.Named TRANSFER) where
  nameOf _ = Hs.fromString "TRANSFER"
instance (HsProtobuf.HasDefault TRANSFER)
instance (HsProtobuf.Message TRANSFER) where
  encodeMessage
    _
    TRANSFER {transferKey, transferValue, transferKeyTest}
    = Hs.mappend
        (Hs.mappend
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) transferKey))
           (HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 2)
              ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString))
                 transferValue)))
        (HsProtobuf.encodeMessageField
           (HsProtobuf.FieldNumber 2002) transferKeyTest)
  decodeMessage _
    = Hs.pure TRANSFER
        <*>
          ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 1)))
        <*>
          ((HsProtobuf.coerceOver
              @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
             (HsProtobuf.at
                HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2)))
        <*>
          HsProtobuf.at
            HsProtobuf.decodeMessageField (HsProtobuf.FieldNumber 2002)
  dotProto _
    = [HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 1)
         (HsProtobufAST.Prim HsProtobufAST.Fixed64)
         (HsProtobufAST.Single "key") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2) (HsProtobufAST.Prim HsProtobufAST.Bytes)
         (HsProtobufAST.Single "value") [] "",
       HsProtobufAST.DotProtoField
         (HsProtobuf.FieldNumber 2002)
         (HsProtobufAST.Prim HsProtobufAST.Int32)
         (HsProtobufAST.Single "keyTest") [] ""]
instance (HsJSONPB.ToJSONPB TRANSFER) where
  toJSONPB (TRANSFER f1 f2 f2002)
    = HsJSONPB.object
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f1),
         "value"
           .=
             ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2),
         "keyTest" .= f2002]
  toEncodingPB (TRANSFER f1 f2 f2002)
    = HsJSONPB.pairs
        ["key"
           .= ((Hs.coerce @Hs.Word64 @(HsProtobuf.Fixed Hs.Word64)) f1),
         "value"
           .=
             ((Hs.coerce @Hs.ByteString @(HsProtobuf.Bytes Hs.ByteString)) f2),
         "keyTest" .= f2002]
instance (HsJSONPB.FromJSONPB TRANSFER) where
  parseJSONPB
    = HsJSONPB.withObject
        "TRANSFER"
        (\ obj
           -> Hs.pure TRANSFER
                <*>
                  ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                     (obj .: "key"))
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                     (obj .: "value"))
                <*> obj .: "keyTest")
instance (HsJSONPB.ToJSON TRANSFER) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON TRANSFER) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema TRANSFER) where
  declareNamedSchema _
    = do let declare_key = HsJSONPB.declareSchemaRef
         transferKey <- declare_key Proxy.Proxy
         let declare_value = HsJSONPB.declareSchemaRef
         transferValue <- declare_value Proxy.Proxy
         let declare_keyTest = HsJSONPB.declareSchemaRef
         transferKeyTest <- declare_keyTest Proxy.Proxy
         let _ = Hs.pure TRANSFER
                   <*>
                     ((HsProtobuf.coerceOver @(HsProtobuf.Fixed Hs.Word64) @Hs.Word64)
                        (HsJSONPB.asProxy declare_key))
                   <*>
                     ((HsProtobuf.coerceOver
                         @(HsProtobuf.Bytes Hs.ByteString) @Hs.ByteString)
                        (HsJSONPB.asProxy declare_value))
                   <*> HsJSONPB.asProxy declare_keyTest
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "TRANSFER",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("key", transferKey),
                                                                               ("value", 
                                                                                transferValue),
                                                                               ("keyTest", 
                                                                                transferKeyTest)]}}
data TRANSFEROK
  = TRANSFEROK {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData TRANSFEROK)
instance (HsProtobuf.Named TRANSFEROK) where
  nameOf _ = Hs.fromString "TRANSFEROK"
instance (HsProtobuf.HasDefault TRANSFEROK)
instance (HsProtobuf.Message TRANSFEROK) where
  encodeMessage _ TRANSFEROK {} = Hs.mempty
  decodeMessage _ = Hs.pure TRANSFEROK
  dotProto _ = []
instance (HsJSONPB.ToJSONPB TRANSFEROK) where
  toJSONPB TRANSFEROK = HsJSONPB.object []
  toEncodingPB TRANSFEROK = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB TRANSFEROK) where
  parseJSONPB
    = HsJSONPB.withObject "TRANSFEROK" (\ obj -> Hs.pure TRANSFEROK)
instance (HsJSONPB.ToJSON TRANSFEROK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON TRANSFEROK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema TRANSFEROK) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "TRANSFEROK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}
newtype ROUTE
  = ROUTE {routeRoutedMessage :: (Hs.Maybe ROUTERoutedMessage)}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ROUTE)
instance (HsProtobuf.Named ROUTE) where
  nameOf _ = Hs.fromString "ROUTE"
instance (HsProtobuf.HasDefault ROUTE)
instance (HsProtobuf.Message ROUTE) where
  encodeMessage _ ROUTE {routeRoutedMessage}
    = (case routeRoutedMessage of
         Hs.Nothing -> Hs.mempty
         Hs.Just x
           -> case x of
                ROUTERoutedMessageJoin y
                  -> HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 30)
                       ((Hs.coerce @(Hs.Maybe Chord.JOIN) @(HsProtobuf.Nested Chord.JOIN))
                          (Hs.Just y))
                ROUTERoutedMessageStore y
                  -> HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 31)
                       ((Hs.coerce
                           @(Hs.Maybe Chord.STORE) @(HsProtobuf.Nested Chord.STORE))
                          (Hs.Just y))
                ROUTERoutedMessageRetrieve y
                  -> HsProtobuf.encodeMessageField
                       (HsProtobuf.FieldNumber 32)
                       ((Hs.coerce
                           @(Hs.Maybe Chord.RETRIEVE) @(HsProtobuf.Nested Chord.RETRIEVE))
                          (Hs.Just y)))
  decodeMessage _
    = Hs.pure ROUTE
        <*>
          HsProtobuf.oneof
            Hs.Nothing
            [((HsProtobuf.FieldNumber 30), 
              Hs.pure (Hs.fmap ROUTERoutedMessageJoin)
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Chord.JOIN) @(Hs.Maybe Chord.JOIN))
                     HsProtobuf.decodeMessageField)),
             ((HsProtobuf.FieldNumber 31), 
              Hs.pure (Hs.fmap ROUTERoutedMessageStore)
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Chord.STORE) @(Hs.Maybe Chord.STORE))
                     HsProtobuf.decodeMessageField)),
             ((HsProtobuf.FieldNumber 32), 
              Hs.pure (Hs.fmap ROUTERoutedMessageRetrieve)
                <*>
                  ((HsProtobuf.coerceOver
                      @(HsProtobuf.Nested Chord.RETRIEVE) @(Hs.Maybe Chord.RETRIEVE))
                     HsProtobuf.decodeMessageField))]
  dotProto _ = []
instance (HsJSONPB.ToJSONPB ROUTE) where
  toJSONPB (ROUTE f30_or_f31_or_f32)
    = HsJSONPB.object
        [(let
            encodeRoutedMessage
              = (case f30_or_f31_or_f32 of
                   Hs.Just (ROUTERoutedMessageJoin f30) -> HsJSONPB.pair "join" f30
                   Hs.Just (ROUTERoutedMessageStore f31) -> HsJSONPB.pair "store" f31
                   Hs.Just (ROUTERoutedMessageRetrieve f32)
                     -> HsJSONPB.pair "retrieve" f32
                   Hs.Nothing -> Hs.mempty)
          in
            (\ options
               -> if HsJSONPB.optEmitNamedOneof options then
                      ("routedMessage"
                         .= HsJSONPB.objectOrNull [encodeRoutedMessage] options)
                        options
                  else
                      encodeRoutedMessage options))]
  toEncodingPB (ROUTE f30_or_f31_or_f32)
    = HsJSONPB.pairs
        [(let
            encodeRoutedMessage
              = (case f30_or_f31_or_f32 of
                   Hs.Just (ROUTERoutedMessageJoin f30) -> HsJSONPB.pair "join" f30
                   Hs.Just (ROUTERoutedMessageStore f31) -> HsJSONPB.pair "store" f31
                   Hs.Just (ROUTERoutedMessageRetrieve f32)
                     -> HsJSONPB.pair "retrieve" f32
                   Hs.Nothing -> Hs.mempty)
          in
            (\ options
               -> if HsJSONPB.optEmitNamedOneof options then
                      ("routedMessage"
                         .= HsJSONPB.pairsOrNull [encodeRoutedMessage] options)
                        options
                  else
                      encodeRoutedMessage options))]
instance (HsJSONPB.FromJSONPB ROUTE) where
  parseJSONPB
    = HsJSONPB.withObject
        "ROUTE"
        (\ obj
           -> Hs.pure ROUTE
                <*>
                  (let
                     parseRoutedMessage parseObj
                       = Hs.msum
                           [Hs.Just Hs.. ROUTERoutedMessageJoin
                              <$> HsJSONPB.parseField parseObj "join",
                            Hs.Just Hs.. ROUTERoutedMessageStore
                              <$> HsJSONPB.parseField parseObj "store",
                            Hs.Just Hs.. ROUTERoutedMessageRetrieve
                              <$> HsJSONPB.parseField parseObj "retrieve",
                            Hs.pure Hs.Nothing]
                   in
                     (obj .: "routedMessage"
                        Hs.>>= HsJSONPB.withObject "routedMessage" parseRoutedMessage)
                       <|> (parseRoutedMessage obj)))
instance (HsJSONPB.ToJSON ROUTE) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ROUTE) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ROUTE) where
  declareNamedSchema _
    = do let declare_routedMessage = HsJSONPB.declareSchemaRef
         routeRoutedMessage <- declare_routedMessage Proxy.Proxy
         let _ = Hs.pure ROUTE <*> HsJSONPB.asProxy declare_routedMessage
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "ROUTE",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("routedMessage", 
                                                                                routeRoutedMessage)]}}
data ROUTERoutedMessage
  = ROUTERoutedMessageJoin Chord.JOIN |
    ROUTERoutedMessageStore Chord.STORE |
    ROUTERoutedMessageRetrieve Chord.RETRIEVE
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ROUTERoutedMessage)
instance (HsProtobuf.Named ROUTERoutedMessage) where
  nameOf _ = Hs.fromString "ROUTERoutedMessage"
instance (HsJSONPB.ToSchema ROUTERoutedMessage) where
  declareNamedSchema _
    = do let declare_join = HsJSONPB.declareSchemaRef
         routeroutedMessageJoin <- declare_join Proxy.Proxy
         let _ = Hs.pure ROUTERoutedMessageJoin
                   <*> HsJSONPB.asProxy declare_join
         let declare_store = HsJSONPB.declareSchemaRef
         routeroutedMessageStore <- declare_store Proxy.Proxy
         let _ = Hs.pure ROUTERoutedMessageStore
                   <*> HsJSONPB.asProxy declare_store
         let declare_retrieve = HsJSONPB.declareSchemaRef
         routeroutedMessageRetrieve <- declare_retrieve Proxy.Proxy
         let _ = Hs.pure ROUTERoutedMessageRetrieve
                   <*> HsJSONPB.asProxy declare_retrieve
         Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "ROUTERoutedMessage",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              [("join", 
                                                                                routeroutedMessageJoin),
                                                                               ("store", 
                                                                                routeroutedMessageStore),
                                                                               ("retrieve", 
                                                                                routeroutedMessageRetrieve)],
                                               HsJSONPB._schemaMinProperties = Hs.Just 1,
                                               HsJSONPB._schemaMaxProperties = Hs.Just 1}}
data ROUTEOK
  = ROUTEOK {}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic)
instance (Hs.NFData ROUTEOK)
instance (HsProtobuf.Named ROUTEOK) where
  nameOf _ = Hs.fromString "ROUTEOK"
instance (HsProtobuf.HasDefault ROUTEOK)
instance (HsProtobuf.Message ROUTEOK) where
  encodeMessage _ ROUTEOK {} = Hs.mempty
  decodeMessage _ = Hs.pure ROUTEOK
  dotProto _ = []
instance (HsJSONPB.ToJSONPB ROUTEOK) where
  toJSONPB ROUTEOK = HsJSONPB.object []
  toEncodingPB ROUTEOK = HsJSONPB.pairs []
instance (HsJSONPB.FromJSONPB ROUTEOK) where
  parseJSONPB
    = HsJSONPB.withObject "ROUTEOK" (\ obj -> Hs.pure ROUTEOK)
instance (HsJSONPB.ToJSON ROUTEOK) where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding
instance (HsJSONPB.FromJSON ROUTEOK) where
  parseJSON = HsJSONPB.parseJSONPB
instance (HsJSONPB.ToSchema ROUTEOK) where
  declareNamedSchema _
    = do Hs.return
           HsJSONPB.NamedSchema
             {HsJSONPB._namedSchemaName = Hs.Just "ROUTEOK",
              HsJSONPB._namedSchemaSchema = Hs.mempty
                                              {HsJSONPB._schemaParamSchema = Hs.mempty
                                                                               {HsJSONPB._paramSchemaType = Hs.Just
                                                                                                              HsJSONPB.SwaggerObject},
                                               HsJSONPB._schemaProperties = HsJSONPB.insOrdFromList
                                                                              []}}